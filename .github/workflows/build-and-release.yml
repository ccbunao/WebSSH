name: Build & Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    runs-on: ubuntu-latest
    name: Build and Release for Multiple OS & Arch
    permissions:
      contents: write
    
    strategy:
      matrix:
        include:
          # Windows targets (64-bit only)
          - os: windows
            goos: windows
            arch: amd64
            suffix: .exe
          - os: windows
            goos: windows
            arch: arm64
            suffix: .exe
          
          # Linux targets (64-bit architectures)
          - os: linux
            goos: linux
            arch: amd64
            suffix: ''
          - os: linux
            goos: linux
            arch: arm64
            suffix: ''
          
          # macOS targets (64-bit only)
          - os: macos
            goos: darwin
            arch: amd64
            suffix: ''
          - os: macos
            goos: darwin
            arch: arm64
            suffix: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: src/github.com/${{ github.repository }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Configure GOPATH
        run: |
          echo "GOPATH=$HOME/go" >> $GITHUB_ENV
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "PROJECT_PATH=src/github.com/${{ github.repository }}" >> $GITHUB_ENV
          
          # 设置完整的项目路径
          echo "FULL_PROJECT_PATH=$GITHUB_WORKSPACE/src/github.com/${{ github.repository }}" >> $GITHUB_ENV
          ls -lR $GITHUB_WORKSPACE/src/github.com/${{ github.repository }}
        shell: bash

      - name: Build for ${{ matrix.os }} (${{ matrix.arch }})
        run: |
          cd "$FULL_PROJECT_PATH/gossh"
          pwd
          ls -l
          
          # 确保有正确的模块支持
          go mod tidy
          
          # 设置版本信息
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          
          # 静态编译
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.arch }} \
            go build -trimpath -ldflags="-s -w -X 'main.version=$VERSION'" \
            -o GoWebSSH${{ matrix.suffix }}
          
          # 创建版本信息文件
          echo "version: $VERSION" > version.txt
          echo "build_date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> version.txt
          
          # 创建压缩包在项目根目录
          mkdir -p $GITHUB_WORKSPACE/dist
          zip -j $GITHUB_WORKSPACE/dist/GoWebSSH-${{ matrix.os }}-${{ matrix.arch }}.zip \
            GoWebSSH${{ matrix.suffix }} \
            version.txt
        shell: bash

      - name: Generate checksums
        run: |
          cd $GITHUB_WORKSPACE/dist
          sha256sum GoWebSSH-*.zip > checksums.txt
          cat checksums.txt
        shell: bash

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: |
            dist/GoWebSSH-*.zip
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
